#!/usr/bin/env node

var rw = require('rw'),
    minimist = require('minimist'),
    queue = require('queue-async'),
    dbf = require('shapefile/dbf'),
    dsv = require('d3-dsv');

var argv = minimist(process.argv.slice(2), {
  alias: {
    d: 'delimiter',
    o: 'out',
    e: 'encoding'
  },
  default: {
    d: '\t',
    o: '/dev/stdout',
    e: null
  }
});

argv.d = argv.d.replace(/\\t/, '\t'); // Make --delimiter="\t" work
var input = argv._[0] || '/dev/stdin';
var formatRows = dsv.dsv(argv.d).formatRows;
var reader = dbf.reader(input, argv.e);

var rows = [];

queue(1)
  .defer(readHeader)
  .defer(readAllRecords)
  .defer(close)
  .await(function(error) { if (error) throw error; });

function readHeader(callback) {
  reader.readHeader(function(error, header) {
    if (error) return callback(error);
    rows.push(header.fields.map(function(d) { return d.name; }));
    callback(null);
  });
}

function readAllRecords(callback) {
  (function readRecord() {
    reader.readRecord(function(error, record) {
      if (error) return callback(error);
      if (record === dbf.end) return callback(null);
      rows.push(record);
      process.nextTick(readRecord);
    });
  })();
}

function close(callback) {
  reader.close(function(error) {
    if (error) return callback(error);
    rw.writeFileSync(argv.o, formatRows(rows));
    callback(null);
  });
}